isSignedIn() { auth != null }
isCurrentUser(uid) { isSignedIn() && auth.uid == uid }

path / {
  read() { true }
  write() { true }
}

type StringID extends String {
  validate() { this.length == 20 }
}

type UserName extends String {
  validate() { this.length > 3 }
}

type User {
  validate() { key() == this.uid }

  index() { ['uid', 'name'] }


  id: StringID,
  name: String,
  gamesJoined: String[]
}

path /users is User[] {
}


type CardSet {
  validate() { key() == this.id }

  index() { ['id', 'url'] }

  id: StringID,
  url: String
}

type PlayerAdminBool extends Boolean {
  read() { true }
  write() { this.parent().parent().parent().userId == auth.uid }
}

type Player {
  validate() { key() == this.id }

  read() { true }
  create() { root.users[auth.uid] != null }
  update() { this.parent().parent().userId == auth.uid }
  delete() { this.parent().parent().userId == auth.uid }

  id: StringID,
  userId: StringID,
  chat: PlayerAdminBool,
  play: PlayerAdminBool
}

type Ban {
  validate() { key() == this.userId }

  read() { true }
  write() { this.parent().parent().userId == auth.uid }

  userId: StringID,
  reason: String,
  when: String
}

type Message {
  validate() { key() == this.id }

  index() { ['id', 'userId', 'when'] }

  create() { this.parent().parent().players[auth.uid] != null }
  update() { false }
  delete() { this.parent().parent().userId == auth.uid }

  id: StringID,
  userId: StringID,
  text: String,
  when: String
}

type Card {
  validate() { key() == this.id }

  create() { this.parent().userId == auth.uid }
  update() { true }
  delete() { this.parent().userId == auth.uid }

  id: StringID,
  cardSetId: StringID,
  x: Number,
  y: Number,
  w: Number,
  h: Number,
  front: String,
  back: String,
  flipped: Boolean
}

type Game {
  validate() { key() == this.id }

  read() { this.bans[auth.uid] != null }
  create() { isSignedIn() }
  update() { prior(this.userId) == auth.uid || prior(this.bans[auth.uid]) != null }
  delete() { prior(this.userId) == auth.uid }

  id: StringID,
  userId: StringID,
  name: String,
  sets: CardSet[],
  players: Player[],
  bans: Ban[],
  messages: Message[],
  cards: Card[]
}

path /games is Game[] {
  read() { isSignedIn() }
  write() { isSignedIn() }
}

