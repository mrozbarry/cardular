// --- Helpers

isSignedIn() { auth != null }
isCurrentUser(userId) { isSignedIn() && (auth.uid == userId) }
isInitial(value) { prior(value) == null }
initial(value, init) { value == (isInitial(value) ? init : prior(value)) }

// --- Custom Types

type UserName extends String {
  validate() { this.length > 3 && this.length <= 24 }
}

type Colour {
  r: Number,
  g: Number,
  b: Number,
  a: Number
}

type User {
  validate() { key() == this.id }

  id: String,
  name: String,
  photoUrl: String | Null,
  colour: Colour
}

type Message {
  validate() { key() == this.id && this.userId.length > 0 && this.content.length > 0 }

  id: String,
  userId: String,
  content: String
}

type Game {
  validate() { key() == this.id }

  id: String,
  userId: String,
  name: String,
  messages: Message[],
  players: String[],
  bans: String[],
  createdAt: String
}

// --- Paths
path / {
  read() { true }
  write() { false }

  /activity/{userId} {
    read() { isSignedIn() }
    create() { isCurrentUser(userId) }
    update() { isCurrentUser(userId) }
  }

  /users {
    read() { isSignedIn() }
    write() { isSignedIn() }

    /{userId} is User {
      read() { isSignedIn() }
      create() { isSignedIn() }
      update() { isCurrentUser(userId) }
      delete() { false }

      index() { ['id', 'name'] }
    }
  }

  /games {
    index() { ['id', 'userId', 'name', 'createdAt'] }

    /{gameId} is Game {
      read() { true }
      write() { isSignedIn() }
    }
  }
}
